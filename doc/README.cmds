.. Automatically generated. Do not edit.


.. _attachgdb:

*attachgdb* *[<nodes>]*
    Primarily for debugging, the command attaches a *gdb* to the main Bro
    process on the given nodes.


.. _capstats:

*capstats* *[<interval>] [<nodes>]*
    Determines the current load on the network interfaces monitored by
    each of the given worker nodes. The load is measured over the
    specified interval (in seconds), or by default over 10 seconds. This
    command uses the `capstats tool
    <http://www.bro-ids.org/files/capstats-release/README.html>`_,
    which is installed along with ``broctl``.
    
    (Note: When using a CFlow and the CFlow command line utility is
    installed as well, the ``capstats`` command can also query the device
    for port statistics. *TODO*: document how to set this up.)


.. _check:

*check* *[<nodes>]*
    Verifies a modified configuration in terms of syntactical correctness
    (most importantly correct syntax in policy scripts). This command
    should be executed for each configuration change *before*
    install_ is used to put the change into place. Note
    that ``check`` is the only command which operates correctly without a
    former install_ command; ``check`` uses the policy
    files as found in SitePolicyPath_ to make
    sure they compile correctly. If they do, install_
    will then copy them over to an internal place from where the nodes
    will read them at the next start_. This approach
    ensures that new errors in a policy scripts will not affect currently
    running nodes, even when one or more of them needs to be restarted.


.. _cleanup:

*cleanup* *[--all] [<nodes>]*
    Clears the nodes' spool directories (if they are not running
    currently). This implies that their persistent state is flushed. Nodes
    that were crashed are reset into *stopped* state. If ``--all`` is
    specified, this command also removes the content of the node's
    TmpDir_, in particular deleteing any data
    potentially saved there for reference from previous crashes.
    Generally, if you want to reset the installation back into a clean
    state, you can first stop_ all nodes, then execute
    ``cleanup --all``, and finally start_ all nodes
    again.


.. _config:

*config*
    Prints all configuration options with their current values.


.. _cron:

*cron* *[enable|disable|?] | [--no-watch] | *
    This command has two modes of operation. Without arguments (or just
    ``--no-watch``), it performs a set of maintainance tasks, including
    the logging of various statistical information, expiring old log
    files, checking for dead hosts, and restarting nodes which terminated
    unexpectedly. The latter can be suppressed with the ``--no-watch``
    option if no auto-restart is desired. This mode is intended to be run
    executed regularly via *cron*, as described in the installation
    instructions. While not intended for interactive use, no harm will be
    caused by executing the command manually: all the maintainance tasks
    will then just be performed one more time.
    
    The second mode is for interactive usage and determines if the regular
    tasks are indeed performed when ``broctl cron`` is executed. In other
    words, even with ``broctl cron`` in your crontab, you can still
    temporarily disable its execution by running ``cron disable``, and
    then later reenable with ``cron enable``. This can be helpful while
    working, e.g., on the BroControl configuration and ``cron`` would
    interfere with that. ``cron ?`` can be used to query the current state.


.. _df:

*df* *[<nodes>]*
    Reports the amount of disk space available on the nodes. Shows only
    paths relevant to the broctl installation.


.. _diag:

*diag* *[<nodes>]*
    If a node has terminated unexpectedly, this command prints a (somewhat
    cryptic) summary of its final state including excerpts of any
    stdout/stderr output, resource usage, and also a stack backtrace if a
    core dump is found. The same information is sent out via mail when a
    node is found to have crashed (the "crash report"). While the
    information is mainly intended for debugging, it can also help to find
    misconfigurations (which are usually, but not always, caught by the
    check_ command).


.. _exec:

*exec* *<command line>*
    Executes the given Unix shell command line on all nodes configured to
    run at least one Bro instance. This is handy to quickly perform an
    action across all systems.


.. _exit:

*exit*
    Terminates the shell.


.. _help:

*help*
    Prints a brief summary of all commands understood by the shell.


.. _install:

*install*
    Reinstalls the given nodes, including all configuration files and
    local policy scripts.  This command must be executed after *all*
    changes to any part of the broctl configuration, otherwise the
    modifications will not take effect. Usually all nodes should be
    reinstalled at the same time, as any inconsistencies between them will
    lead to strange effects. Before executing ``install``, it is recommended
    to verify the configuration with check_.


.. _netstats:

*netstats* *[<nodes>]*
    Queries each of the nodes for their current counts of captured and
    dropped packets.


.. _nodes:

*nodes*
    Prints a list of all configured nodes.


.. _peerstatus:

*peerstatus* *[<nodes>]*
    Primarily for debugging, ``peerstatus`` reports statistics about the
    network connections cluster nodes are using to communicate with other
    nodes.


.. _print:

*print* *<id> [<nodes>]*
    Reports the *current* live value of the given Bro script ID on all of
    the specified nodes (which obviously must be running). This can for
    example be useful to (1) check that policy scripts are working as
    expected, or (2) confirm that configuration changes have in fact been
    applied.  Note that IDs defined inside a Bro namespace must be
    prefixed with ``<namespace>::`` (e.g., ``print SSH::did*ssh*version`` to
    print the corresponding table from ``ssh.bro``.)


.. _process:

*process*
    - <trace> [options] [-- scripts]]
    
    Runs Bro offline on a given trace file using the same configuration as
    when running live. It does however use the potentially
    not-yet-installed policy files in SitePolicyPath_. Additional Bro
    command line flags and scripts can be given, the latter must be
    prefixed by ``--``.
    
    Upon completion, the command prints a path where the log files can be
    found. Subsequent runs of this command may delete these logs.
    
    In cluster mode, Bro is run with *both* manager and worker scripts
    loaded into a single instance. While that doesn't fully reproduce the
    live setup, it is often sufficient for debugging analysis scripts.


.. _quit:

*quit*
    Terminates the shell.


.. _restart:

*restart* *[--clean] [<nodes>]*
    Restarts the given nodes, or all nodes if none are specified. The
    effect is the same as first executing stop_ followed
    by a start_, giving the same nodes in both cases.
    This command is most useful to activate any changes made to Bro policy
    scripts (after running install_ first). Note that a
    subset of policy changes can also be installed on the fly via the
    update_, without requiring a restart.
    
    If ``--clean`` is given, the installation is reset into a clean state
    before restarting. More precisely, a ``restart --clean`` turns into
    the command sequence stop_, cleanup_ --all, check_, install_, and
    start_.


.. _scripts:

*scripts* *[-p|-c] [<nodes>]*
    Primarily for debugging Bro configurations, the ``script`` command lists
    all the Bro scripts loaded by each of the nodes in the order as they
    will be parsed by the node at startup. If ``-p`` is given, all scripts
    are listed with their full paths. If ``-c`` is given, the command
    operates as check_ does: it reads the policy files
    from their *original* location, not the copies installed by
    install_. The latter option is useful to check a
    not yet installed configuration.


.. _start:

*start* *[<nodes>]*
    Starts the given nodes, or all nodes if none are specified. Nodes
    already running are left untouched.


.. _status:

*status* *[<nodes>]*
    Prints the current status of the given nodes.


.. _stop:

*stop* *[<nodes>]*
    Stops the given nodes, or all nodes if none are specified. Nodes not
    running are left untouched.


.. _top:

*top* *[<nodes>]*
    For each of the nodes, prints the status of the two Bro
    processes (parent process and child process) in a *top*-like
    format, including CPU usage and memory consumption. If
    executed interactively, the display is updated frequently
    until key ``q`` is pressed. If invoked non-interactively, the
    status is printed only once.


.. _update:

*update* *[<nodes>]*
    After a change to Bro policy scripts, this command updates the Bro
    processes on the given nodes *while they are running* (i.e., without
    requiring a restart_). However, such dynamic
    updates work only for a *subset* of Bro's full configuration. The
    following changes can be applied on the fly: (1) The value of all
    const variables defined with the ``&redef`` attribute can be changed.
    More extensive script changes are not possible during runtime and
    always require a restart; if you change more than just the values of
    ``&redef``-able consts and still issue ``update``, the results are
    undefined and can lead to crashes. Also note that before running
    ``update``, you still need to do an install_ (preferably after
    check_), as otherwise ``update`` will not see the changes and resend
    the old configuration.

