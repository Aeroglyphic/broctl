#! /usr/bin/env python
#
# The BroControl interactive shell.

BroBase = "@PREFIX@"

import os
import sys
import time

# Allow user to override default broctl install directory
tmpbrobase = os.getenv("BROCTL_INSTALL_PREFIX")
if tmpbrobase and os.path.isdir(tmpbrobase):
    BroBase = tmpbrobase

sys.path = [os.path.join(BroBase, "lib/broctl")] + sys.path

from BroControl.broctl import BroCtl
from BroControl import brocmd
from BroControl import util
from BroControl import version

# Main command loop.
class BroCtlCmdLoop(brocmd.ExitValueCmd):
    prompt = '[BroControl] > '

    def __init__(self, broctl_class=BroCtl):
        brocmd.ExitValueCmd.__init__(self)
        self.broctl = broctl_class(BroBase, ui=self)

    def output(self, text):
        self.stdout.write(text)
        self.stdout.write("\n")
    info = output

    def error(self, str):
        self.output("Error: %s" % str)
        self.exit_code = 1
    warn = error

    def default(self, line):
        m = line.split()

        if not self.broctl.plugins.runCustomCommand(m[0], " ".join(m[1:]), self):
            self.error("unknown command '%s'" % m[0])

        return True

    def emptyline(self):
        pass

    def precmd(self, line):
        util.debug(1, line, prefix="command")
        return line

    def postcmd(self, stop, line):
        #execute.clearDeadHostConnections()
        util.debug(1, "done", prefix="command")
        return stop

    def do_EOF(self, args):
        self._stopping = True
        return True

    def do_exit(self, args):
        """Terminates the shell."""
        self._stopping = True
        return True

    def do_quit(self, args):
        """Terminates the shell."""
        self._stopping = True
        return True

    def do_nodes(self, args):
        """Prints a list of all configured nodes."""
        if args:
            raise SyntaxError("nodes does not take any arguments")

        for node in self.broctl.nodes():
            print node.describe()

        return True

    def do_config(self, args):
        """Prints all configuration options with their current values."""
        if args:
            raise SyntaxError("config does not take any arguments")

        for (key, val) in sorted(self.broctl.get_config()):
            self.output("%s = %s" % (key, val))

        return True

    def do_install(self, args):
        """- [--local]

        Reinstalls on all nodes (unless the ``--local`` option is given, in
        which case nothing will be propagated to other nodes), including all
        configuration files and local policy scripts.  Usually all nodes
        should be reinstalled at the same time, as any inconsistencies between
        them will lead to strange effects.  This command must be
        executed after *all* changes to any part of the broctl configuration
        (and after upgrading to a new version of Bro or BroControl),
        otherwise the modifications will not take effect.  Before executing
        ``install``, it is recommended to verify the configuration
        with check_."""

        local = False

        for arg in args.split():
            if arg == "--local":
                local = True
            else:
                raise SyntaxError("Invalid argument: %s" % arg)

        success = self.broctl.install(local)
        return success

    def do_start(self, args):
        """- [<nodes>]

        Starts the given nodes, or all nodes if none are specified. Nodes
        already running are left untouched.
        """

        success = self.broctl.start(node_list=args)
        return success

    def do_stop(self, args):
        """- [<nodes>]

        Stops the given nodes, or all nodes if none are specified. Nodes not
        running are left untouched.
        """
        success = self.broctl.stop(node_list=args)
        return success

    def do_restart(self, args):
        """- [--clean] [<nodes>]

        Restarts the given nodes, or all nodes if none are specified. The
        effect is the same as first executing stop_ followed
        by a start_, giving the same nodes in both cases.
        This command is most useful to activate any changes made to Bro policy
        scripts (after running install_ first). Note that a
        subset of policy changes can also be installed on the fly via
        update_, without requiring a restart.

        If ``--clean`` is given, the installation is reset into a clean state
        before restarting. More precisely, a ``restart --clean`` turns into
        the command sequence stop_, cleanup_, check_, install_, and
        start_.
        """
        clean = False
        if args.startswith("--clean"):
            args = args[7:]
            clean = True

        success = self.broctl.restart(node_list=args, clean=clean)
        return success

    def do_status(self, args):
        """- [<nodes>]

        Prints the current status of the given nodes."""

        success = True
        results = self.broctl.status(node_list=args)

        typewidth = 7
        hostwidth = 16
        if results and results[0]["type"] == "standalone":
            # In standalone mode, we need a wider "type" column.
            typewidth = 10
            hostwidth = 13

        header = dict((x, x.title()) for x in 'name type host status pid peers started'.split())
        self.output("{name:<12} {type:<{0}} {host:<{1}} {status:<9} {pid:<6} {peers:<6} {started}".format(typewidth, hostwidth, **header))

        for node_info in results:
            if node_info["pid"]:
                self.output("{name:<12} {type:<{0}} {host:<{1}} {status:<9} {pid:<6} {peers:<6} {started}".format(typewidth, hostwidth, **node_info))
            else:
                self.output("{name:<12} {type:<{0}} {host:<{1}} {status}".format(typewidth, hostwidth, **node_info))

            # Return status code of True only if all nodes are running
            if node_info["status"] != "running":
                success = False

        return success

    def _do_top_once(self, args):
        success = True
        results = self.broctl.top(args)

        typewidth = 7
        hostwidth = 16
        if results and results[0]["type"] == "standalone":
            # In standalone mode, we need a wider "type" column.
            typewidth = 10
            hostwidth = 13

        lines = ["%-12s %-*s %-*s %-7s %-7s %-6s %-4s %-5s %s" % ("Name",
                typewidth, "Type", hostwidth, "Host", "Pid", "Proc", "VSize",
                "Rss", "Cpu", "Cmd")]
        for top_info in results:
            msg = [ "%-12s" % top_info["name"] ]
            msg.append("%-*s" % (typewidth, top_info["type"]))
            msg.append("%-*s" % (hostwidth, top_info["host"]))
            if top_info["error"]:
                msg.append("<%s>" % top_info["error"])
                success = False
            else:
                msg.append("%-7s" % top_info["pid"])
                msg.append("%-7s" % top_info["proc"])
                msg.append("%-6s" % util.prettyPrintVal(top_info["vsize"]))
                msg.append("%-4s" % util.prettyPrintVal(top_info["rss"]))
                msg.append("%3s%% " % top_info["cpu"])
                msg.append("%s" % top_info["cmd"])
           
            lines.append(" ".join(msg))

        return (success, lines)

    def do_top(self, args):
        """- [<nodes>]

        For each of the nodes, prints the status of the two Bro
        processes (parent process and child process) in a *top*-like
        format, including CPU usage and memory consumption. If
        executed interactively, the display is updated frequently
        until key ``q`` is pressed. If invoked non-interactively, the
        status is printed only once."""

        if not Interactive:
            success, lines = self._do_top_once(args)
            for line in lines:
                self.output(line)

            return success

        util.enterCurses()
        util.clearScreen()

        count = 0

        while util.getCh() != "q":
            if count % 10 == 0:
                success, lines = self._do_top_once(args)
                util.clearScreen()
                util.printLines(lines)
            time.sleep(.1)
            count += 1

        util.leaveCurses()

        return success

    def do_diag(self, args):
        """- [<nodes>]

        If a node has terminated unexpectedly, this command prints a (somewhat
        cryptic) summary of its final state including excerpts of any
        stdout/stderr output, resource usage, and also a stack backtrace if a
        core dump is found. The same information is sent out via mail when a
        node is found to have crashed (the "crash report"). While the
        information is mainly intended for debugging, it can also help to find
        misconfigurations (which are usually, but not always, caught by the
        check_ command)."""

        success = self.broctl.diag(node_list=args)
        return success

    def do_attachgdb(self, args):
        """- [<nodes>]

        Primarily for debugging, the command attaches a *gdb* to the main Bro
        process on the given nodes. """

        self.lock()
        (success, nodes) = nodeArgs(args)
        if success:
            nodes = plugin.Registry.cmdPreWithNodes("attachgdb", nodes)
            cmdSuccess, cmdOutput = control.attachGdb(nodes)
            if not cmdSuccess:
                self.exit_code = 1
            cmdOutput.printResults()
            plugin.Registry.cmdPostWithNodes("attachgdb", nodes)
        else:
            self.exit_code = 1

    def do_cron(self, args):
        """- [enable|disable|?] | [--no-watch]

        This command has two modes of operation. Without arguments (or just
        ``--no-watch``), it performs a set of maintenance tasks, including
        the logging of various statistical information, expiring old log
        files, checking for dead hosts, and restarting nodes which terminated
        unexpectedly (the latter can be suppressed with the ``--no-watch``
        option if no auto-restart is desired). This mode is intended to be
        executed regularly via *cron*, as described in the installation
        instructions. While not intended for interactive use, no harm will be
        caused by executing the command manually: all the maintenance tasks
        will then just be performed one more time.

        The second mode is for interactive usage and determines if the regular
        tasks are indeed performed when ``broctl cron`` is executed. In other
        words, even with ``broctl cron`` in your crontab, you can still
        temporarily disable it by running ``cron disable``, and
        then later reenable with ``cron enable``. This can be helpful while
        working, e.g., on the BroControl configuration and ``cron`` would
        interfere with that. ``cron ?`` can be used to query the current state.
        """

        watch = True

        if args == "--no-watch":
            watch = False
        elif args:
            if args == "enable":
                self.broctl.setcronenabled(True)
            elif args == "disable":
                self.broctl.setcronenabled(False)
            elif args == "?":
                self.broctl.cronenabled()
            else:
                self.error("invalid cron argument")
                return False

            return True

        self.broctl.cron(watch)

        return True


    def do_check(self, args):
        """- [<nodes>]

        Verifies a modified configuration in terms of syntactical correctness
        (most importantly correct syntax in policy scripts). This command
        should be executed for each configuration change *before*
        install_ is used to put the change into place.
        The ``check`` command uses the policy files as found in SitePolicyPath_
        to make sure they compile correctly. If they do, install_
        will then copy them over to an internal place from where the nodes
        will read them at the next start_. This approach
        ensures that new errors in a policy script will not affect currently
        running nodes, even when one or more of them needs to be restarted."""

        success = self.broctl.check(node_list=args)
        return success

    def do_cleanup(self, args):
        """- [--all] [<nodes>]

        Clears the nodes' spool directories (if they are not running
        currently). This implies that their persistent state is flushed. Nodes
        that were crashed are reset into *stopped* state. If ``--all`` is
        specified, this command also removes the content of the node's
        TmpDir_, in particular deleteing any data
        potentially saved there for reference from previous crashes.
        Generally, if you want to reset the installation back into a clean
        state, you can first stop_ all nodes, then execute
        ``cleanup --all``, and finally start_ all nodes
        again."""

        cleantmp = False
        if args.startswith("--all"):
            args = args[5:]
            cleantmp = True

        success = self.broctl.cleanup(node_list=args, all=cleantmp)
        return success

    def do_capstats(self, args):
        """- [<nodes>] [<interval>]

        Determines the current load on the network interfaces monitored by
        each of the given worker nodes. The load is measured over the
        specified interval (in seconds), or by default over 10 seconds. This
        command uses the :doc:`capstats<../../components/capstats/README>`
        tool, which is installed along with ``broctl``.

        (Note: When using a CFlow and the CFlow command line utility is
        installed as well, the ``capstats`` command can also query the device
        for port statistics. *TODO*: document how to set this up.)"""

        interval = 10
        args = args.split()

        if args:
            try:
                interval = max(1, int(args[-1]))
                args = args[0:-1]
            except ValueError:
                pass

        args = " ".join(args)

        success = self.broctl.capstats(node_list=args, interval=interval)
        return success

    def do_update(self, args):
        """- [<nodes>]

        After a change to Bro policy scripts, this command updates the Bro
        processes on the given nodes *while they are running* (i.e., without
        requiring a restart_). However, such dynamic
        updates work only for a *subset* of Bro's full configuration. The
        following changes can be applied on the fly:  The value of all
        const variables defined with the ``&redef`` attribute can be changed.
        More extensive script changes are not possible during runtime and
        always require a restart; if you change more than just the values of
        ``&redef``-able consts and still issue ``update``, the results are
        undefined and can lead to crashes. Also note that before running
        ``update``, you still need to do an install_ (preferably after
        check_), as otherwise ``update`` will not see the changes and it will
        resend the old configuration."""

        success = self.broctl.update(node_list=args)
        return success

    def do_df(self, args):
        """- [<nodes>]

        Reports the amount of disk space available on the nodes. Shows only
        paths relevant to the broctl installation."""

        success = True

        results = self.broctl.df(node_list=args)

        self.output("%27s  %15s  %-5s  %-5s  %-5s" % ("", "", "total", "avail", "capacity"))
        for (node, dfs) in results:
            for df in dfs:
                if df[0] == "FAIL":
                    success = False
                    self.error("df helper failed on %s: %s" % (node, df[1]))
                    continue

                self.output("%27s  %15s  %-5s  %-5s  %-5.1f%%" % (node,
                    df.fs, util.prettyPrintVal(df.total), util.prettyPrintVal(df.available),
                    df.percent))

        return success

    def do_print(self, args):
        """- <id> [<nodes>]

        Reports the *current* live value of the given Bro script ID on all of
        the specified nodes (which obviously must be running). This can for
        example be useful to (1) check that policy scripts are working as
        expected, or (2) confirm that configuration changes have in fact been
        applied.  Note that IDs defined inside a Bro namespace must be
        prefixed with ``<namespace>::`` (e.g.,
        ``print HTTP::mime_types_extensions`` to print the corresponding
        table from ``file-ident.bro``)."""

        args = args.split()
        try:
            id = args[0]
            args = " ".join(args[1:])
        except IndexError:
            raise SyntaxError("no id given to print")

        success = self.broctl.printid(node_list=args, id=id)
        return success

    def do_peerstatus(self, args):
        """- [<nodes>]

		Primarily for debugging, ``peerstatus`` reports statistics about the
        network connections cluster nodes are using to communicate with other
        nodes."""

        success = self.broctl.peerstatus(node_list=args)
        return success

    def do_netstats(self, args):
        """- [<nodes>]

		Queries each of the nodes for their current counts of captured and
        dropped packets."""

        success = self.broctl.netstats(node_list=args)
        return success

    def do_exec(self, args):
        """- <command line>

		Executes the given Unix shell command line on all hosts configured to
        run at least one Bro instance. This is handy to quickly perform an
        action across all systems."""

        success = True
        for node, nodesuccess, output in self.broctl.execute(cmd=args):
            out = output and "\n> ".join(output) or ""
            self.output("[%s/%s] %s\n> %s" % (node.name, node.host, (nodesuccess and " " or "error"), out))
            if not nodesuccess:
                success = False

        return success

    def do_scripts(self, args):
        """- [-c] [<nodes>]

		Primarily for debugging Bro configurations, the ``scripts``
       	command lists all the Bro scripts loaded by each of the nodes in the
        order they will be parsed by the node at startup.
        If ``-c`` is given, the command operates as check_ does: it reads
        the policy files from their *original* location, not the copies
        installed by install_. The latter option is useful to check a
        not yet installed configuration."""

        check = False

        args = args.split()

        try:
            while args[0].startswith("-"):

                opt = args[0]

                if opt == "-c":
                    # Check non-installed policies.
                    check = True
                else:
                    raise SyntaxError("Unknown option: %s" % opt)

                args = args[1:]

        except IndexError:
            pass

        args = " ".join(args)

        success = self.broctl.scripts(node_list=args, check=check)
        return success

    def do_process(self, args):
        """- <trace> [options] [-- <scripts>]

        Runs Bro offline on a given trace file using the same configuration as
        when running live. It does, however, use the potentially
        not-yet-installed policy files in SitePolicyPath_ and disables log
        rotation. Additional Bro command line flags and scripts can
        be given (each argument after a ``--`` argument is interpreted as
        a script).

        Upon completion, the command prints a path where the log files can be
        found. Subsequent runs of this command may delete these logs.

        In cluster mode, Bro is run with *both* manager and worker scripts
        loaded into a single instance. While that doesn't fully reproduce the
        live setup, it is often sufficient for debugging analysis scripts.
        """
        options = []
        scripts = []
        trace = None
        in_scripts = False

        for arg in args.split():

            if not trace:
                trace = arg
                continue

            if arg == "--":
                if in_scripts:
                    raise SyntaxError("cannot parse arguments")

                in_scripts = True
                continue

            if not in_scripts:
                options += [arg]

            else:
                scripts += [arg]

        if not trace:
            raise SyntaxError("no trace file given")

        success = self.broctl.process(trace, options, scripts)
        return success

    def completedefault(self, text, line, begidx, endidx):
        # Commands that take a "<nodes>" argument.
        nodes_cmds = ["capstats", "check", "cleanup", "df", "diag", "netstats", "print", "restart", "start", "status", "stop", "top", "update", "attachgdb", "peerstatus", "scripts"]

        args = line.split()

        if not args or args[0] not in nodes_cmds:
            return []

        nodes = ["manager", "workers", "proxies", "all"] + [n.name for n in Config.nodes()]

        return [n for n in nodes if n.startswith(text)]

    # Prints the command's docstring in a form suitable for direct inclusion
    # into the documentation.
    def printReference(self):
        print ".. Automatically generated. Do not edit."
        print

        cmds = []

        for i in self.__class__.__dict__:
            doc = self.__class__.__dict__[i].__doc__
            if i.startswith("do_") and doc:
                cmds += [(i[3:], doc)]

        cmds.sort()

        for (cmd, doc) in cmds:
            if doc.startswith("- "):
                # First line are arguments.
                doc = doc.split("\n")
                args = doc[0][2:]
                doc = "\n".join(doc[1:])
            else:
                args = ""

            if args:
                args = (" *%s*" % args)
            else:
                args = ""

            output = ""
            for line in doc.split("\n"):
                line = line.strip()
                output += "    " + line + "\n"

            output = output.strip()

            print
            print ".. _%s:\n\n*%s*%s\n    %s" % (cmd, cmd, args, output)
            print

    def do_help(self, args):
        """Prints a brief summary of all commands understood by the shell."""

        plugin_help = ""

        for (cmd, args, descr) in self.broctl.plugins.allCustomCommands():
            if not plugin_help:
                plugin_help += "\nCommands provided by plugins:\n\n"

            if args:
                cmd = "%s %s" % (cmd, args)

            plugin_help += "  %-32s - %s\n" % (cmd, descr)

        self.output(
"""
BroControl Version %s

  capstats [<nodes>] [<secs>]      - Report interface statistics with capstats
  check [<nodes>]                  - Check configuration before installing it
  cleanup [--all] [<nodes>]        - Delete working dirs (flush state) on nodes
  config                           - Print broctl configuration
  cron [--no-watch]                - Perform jobs intended to run from cron
  cron enable|disable|?            - Enable/disable \"cron\" jobs
  df [<nodes>]                     - Print nodes' current disk usage
  diag [<nodes>]                   - Output diagnostics for nodes
  exec <shell cmd>                 - Execute shell command on all hosts
  exit                             - Exit shell
  install                          - Update broctl installation/configuration
  netstats [<nodes>]               - Print nodes' current packet counters
  nodes                            - Print node configuration
  peerstatus [<nodes>]             - Print status of nodes' remote connections
  print <id> [<nodes>]             - Print values of script variable at nodes
  process <trace> [<op>] [-- <sc>] - Run Bro (with options and scripts) on trace
  quit                             - Exit shell
  restart [--clean] [<nodes>]      - Stop and then restart processing
  scripts [-c] [<nodes>]           - List the Bro scripts the nodes will load
  start [<nodes>]                  - Start processing
  status [<nodes>]                 - Summarize node status
  stop [<nodes>]                   - Stop processing
  top [<nodes>]                    - Show Bro processes ala top
  update [<nodes>]                 - Update configuration of nodes on the fly
  %s""" % (version.VERSION, plugin_help))

loop = BroCtlCmdLoop(BroCtl)

# Hidden command to print the command documentation.
if len(sys.argv) == 2 and sys.argv[1] == "--print-doc":
    loop.printReference()
    sys.exit(0)


if len(sys.argv) > 1:
    Interactive = False
    line = " ".join(sys.argv[1:])
    loop.precmd(line)
    success = loop.onecmd(line)
    loop.postcmd(False, line)
else:
    Interactive = True
    success = loop.cmdloop("\nWelcome to BroControl %s\n\nType \"help\" for help.\n" % version.VERSION)

sys.exit(not success)
